diff --git a/config/p2p.cfg b/config/p2p.cfg
index 7fe1452..0a9fc50 100644
--- a/config/p2p.cfg
+++ b/config/p2p.cfg
@@ -9,5 +9,5 @@ download_speed = 10 MiB  # per second
 average_uptime = 8 hours
 average_downtime = 16 hours
 average_recover_time = 3 days
-average_lifetime = 64 days
+average_lifetime = 128 days
 arrival_time = 0
\ No newline at end of file
diff --git a/main/storage.py b/main/storage.py
index 18cc666..35ecd77 100644
--- a/main/storage.py
+++ b/main/storage.py
@@ -29,7 +29,7 @@ if __name__ == "__main__":
         print("Using base extension")
     elif args.extension == "advanced":
         from src.storage_advanced_extension import (Backup, Node,
-                                                    get_lost_blocks)
+                                                    get_lost_blocks, print_stats)
 
         print("Using advanced extension")
     else:
@@ -81,3 +81,6 @@ if __name__ == "__main__":
         print("Data is safe")
     else:
         print("Data has been lost")
+
+    if args.extension == "advanced":
+        print_stats(sim.nodes)
diff --git a/src/storage_advanced_extension.py b/src/storage_advanced_extension.py
index 2ab81b6..3dd0e04 100644
--- a/src/storage_advanced_extension.py
+++ b/src/storage_advanced_extension.py
@@ -15,6 +15,7 @@ def exp_rv(mean: float) -> float:
 
 
 def print_stats(nodes: list["Node"]) -> None:
+    block_replicas: dict[Node, list[int]] = {} # mapping node to number of replica of its blocks
     for node in nodes:
         print(node.name)
         print(node.local_blocks)
@@ -30,8 +31,20 @@ def print_stats(nodes: list["Node"]) -> None:
         print(f"Total backup blocks: {[len(n) for n in node.backed_up_blocks]}")
         print("Blocks held by:\n")
         for other_node in nodes:
+            if node not in block_replicas: 
+                 block_replicas[node] = [0] * node.n
+            for block in other_node.remote_blocks_held[node]:
+                block_replicas[node][block] += 1 
             print(f"{other_node.name}: {other_node.remote_blocks_held[node]}")
 
+    print("\nStats about replica:")
+    total_sum: int = 0
+    for node in nodes:
+        print(f"{node.name} has replica: {block_replicas[node]}")
+        total_sum += sum(block_replicas[node])
+
+    print(f"\nAverage number of replica per block: {total_sum / (nodes[0].n * len(nodes))}")
+
 
 def get_safe_node_blocks(node: "Node") -> int:
     count: int = 0
